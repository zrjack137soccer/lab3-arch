                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f62804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Zachry Jacklin Section 2 NetId: jacklinz
                            | #
                            | # In my code I modified it in the following steps:
                            | # 1. I added iaddq to shorten steps
                            | # 2. I made sure to store each point of src in a seperate register from %r8 to %rbx
                            | # 3. I added more loops to do the process of unrolling
                            | # 4. I initialized all the registers in loop to avoid any bad copying.
                            | #
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 
0x032: 6300                 | 	xorq %rax, %rax		# set count to 0
0x034: 2021                 | 	rrmovq %rdx, %rcx	# copy len to %rcx
0x036: c0f1f8ffffffffffffff | 	iaddq $-8, %rcx		# %rcx - 8
0x040: 71c201000000000000   | 	jle Next		# jump to next
                            | 
0x049:                      | Loop:	
0x049: 50870000000000000000 | 	mrmovq (%rdi), %r8	# src[i] to %r8
0x053: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# src[i+1] to %r9
0x05d: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# src[i+2] to %r10
0x067: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# src[i+3] to %r11
0x071: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# src[i+4] to %r12
0x07b: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# src[i+5] to %r13
0x085: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14	# src[i+6] to %r14
0x08f: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx	# src[i+7] to %rbx
0x099: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# src[i] to dst[i]
0x0a3: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# src[i+1] to dst[i+1]
0x0ad: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# src[i+2] to dst[i+2]
0x0b7: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# src[i+3] to dst[i+3] 
0x0c1: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	# src[i+4] to dst[i+4]
0x0cb: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)	# src[i+5] to dst[i+5]
0x0d5: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)	# src[i+6] to dst[i+6]
0x0df: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)	# src[i+7] to dst[i+7]
                            | 	
0x0e9:                      | ele1:
0x0e9: 6288                 | 	andq %r8, %r8		# %r8 < 0?
0x0eb: 71fe00000000000000   | 	jle ele2		# jump to element2 if less than 
0x0f4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0fe:                      | ele2:
0x0fe: 6299                 | 	andq %r9, %r9		# %r9 < 0?
0x100: 711301000000000000   | 	jle ele3		# jump to element3 if less than
0x109: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x113:                      | ele3:
0x113: 62aa                 | 	andq %r10, %r10		# %r10 < 0?
0x115: 712801000000000000   | 	jle ele4		# jump to element4 if less than
0x11e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x128:                      | ele4:
0x128: 62bb                 | 	andq %r11, %r11		# %r11 < 0?
0x12a: 713d01000000000000   | 	jle ele5		# jump to element5 if less than
0x133: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x13d:                      | ele5:
0x13d: 62cc                 | 	andq %r12, %r12		# %r12 < 0?
0x13f: 715201000000000000   | 	jle ele6		# jump to element6 if less than
0x148: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x152:                      | ele6:
0x152: 62dd                 | 	andq %r13, %r13		# %r13 < 0?
0x154: 716701000000000000   | 	jle ele7		# jump to element7 if less than
0x15d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x167:                      | ele7:
0x167: 62ee                 | 	andq %r14, %r14		# %r14 < 0?
0x169: 717c01000000000000   | 	jle ele8		# jump to element8 if less than
0x172: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x17c:                      | ele8:
0x17c: 6233                 | 	andq %rbx, %rbx		# %rbx < 0?
0x17e: 719101000000000000   | 	jle Npos1		# jump to Npos1 if less than
0x187: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x191:                      | Npos1:
0x191: c0f74000000000000000 | 	iaddq $64, %rdi		# src++
0x19b: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x1a5: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len--
0x1af: c0f1f8ffffffffffffff | 	iaddq $-8, %rcx		# (len - 8)--
0x1b9: 764900000000000000   | 	jg Loop
                            | 
0x1c2:                      | Next:
0x1c2: 6222                 | 	andq %rdx, %rdx		# %rdx < 0?
0x1c4: 711d02000000000000   | 	jle Done		# jump to done if less than
                            | 
0x1cd:                      | Loop2:
0x1cd: 50370000000000000000 | 	mrmovq (%rdi), %rbx	# src[i]++ to %rbx
0x1d7: 40360000000000000000 | 	rmmovq %rbx, (%rsi)	# src[i]++ to dst[i]++
0x1e1: 6233                 | 	andq %rbx, %rbx		# %rbx < 0?
0x1e3: 71f601000000000000   | 	jle Npos2		# jump to Npos2 if less than
0x1ec: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x1f6:                      | Npos2:
0x1f6: c0f70800000000000000 | 	iaddq $8, %rdi		# (src + 8)++
0x200: c0f60800000000000000 | 	iaddq $8, %rsi		# (dst + 8)++
0x20a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x214: 76cd01000000000000   | 	jg Loop2
                            | 	
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x21d:                      | Done:
0x21d: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x21e:                      | End:
                            | #/* $end ncopy-ys */
0x21e:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x220:                      | 	.align 8
0x220:                      | src:
0x220: ffffffffffffffff     | 	.quad -1
0x228: feffffffffffffff     | 	.quad -2
0x230: fdffffffffffffff     | 	.quad -3
0x238: 0400000000000000     | 	.quad 4
0x240: fbffffffffffffff     | 	.quad -5
0x248: faffffffffffffff     | 	.quad -6
0x250: f9ffffffffffffff     | 	.quad -7
0x258: 0800000000000000     | 	.quad 8
0x260: 0900000000000000     | 	.quad 9
0x268: f6ffffffffffffff     | 	.quad -10
0x270: f5ffffffffffffff     | 	.quad -11
0x278: 0c00000000000000     | 	.quad 12
0x280: f3ffffffffffffff     | 	.quad -13
0x288: f2ffffffffffffff     | 	.quad -14
0x290: f1ffffffffffffff     | 	.quad -15
0x298: f0ffffffffffffff     | 	.quad -16
0x2a0: efffffffffffffff     | 	.quad -17
0x2a8: 1200000000000000     | 	.quad 18
0x2b0: edffffffffffffff     | 	.quad -19
0x2b8: 1400000000000000     | 	.quad 20
0x2c0: ebffffffffffffff     | 	.quad -21
0x2c8: eaffffffffffffff     | 	.quad -22
0x2d0: 1700000000000000     | 	.quad 23
0x2d8: e8ffffffffffffff     | 	.quad -24
0x2e0: 1900000000000000     | 	.quad 25
0x2e8: e6ffffffffffffff     | 	.quad -26
0x2f0: e5ffffffffffffff     | 	.quad -27
0x2f8: 1c00000000000000     | 	.quad 28
0x300: 1d00000000000000     | 	.quad 29
0x308: 1e00000000000000     | 	.quad 30
0x310: e1ffffffffffffff     | 	.quad -31
0x318: 2000000000000000     | 	.quad 32
0x320: 2100000000000000     | 	.quad 33
0x328: 2200000000000000     | 	.quad 34
0x330: 2300000000000000     | 	.quad 35
0x338: 2400000000000000     | 	.quad 36
0x340: dbffffffffffffff     | 	.quad -37
0x348: daffffffffffffff     | 	.quad -38
0x350: d9ffffffffffffff     | 	.quad -39
0x358: d8ffffffffffffff     | 	.quad -40
0x360: 2900000000000000     | 	.quad 41
0x368: d6ffffffffffffff     | 	.quad -42
0x370: 2b00000000000000     | 	.quad 43
0x378: 2c00000000000000     | 	.quad 44
0x380: d3ffffffffffffff     | 	.quad -45
0x388: d2ffffffffffffff     | 	.quad -46
0x390: d1ffffffffffffff     | 	.quad -47
0x398: d0ffffffffffffff     | 	.quad -48
0x3a0: cfffffffffffffff     | 	.quad -49
0x3a8: 3200000000000000     | 	.quad 50
0x3b0: 3300000000000000     | 	.quad 51
0x3b8: 3400000000000000     | 	.quad 52
0x3c0: 3500000000000000     | 	.quad 53
0x3c8: caffffffffffffff     | 	.quad -54
0x3d0: c9ffffffffffffff     | 	.quad -55
0x3d8: 3800000000000000     | 	.quad 56
0x3e0: 3900000000000000     | 	.quad 57
0x3e8: 3a00000000000000     | 	.quad 58
0x3f0: 3b00000000000000     | 	.quad 59
0x3f8: 3c00000000000000     | 	.quad 60
0x400: 3d00000000000000     | 	.quad 61
0x408: 3e00000000000000     | 	.quad 62
0x410: 3f00000000000000     | 	.quad 63
0x418: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x420:                      | 	.align 16
0x420:                      | Predest:
0x420: fadebc0000000000     | 	.quad 0xbcdefa
0x428:                      | dest:
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620:                      | Postdest:
0x620: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x628:                      | .align 8
                            | # Run time stack
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
                            | 
0x6a8:                      | Stack:
