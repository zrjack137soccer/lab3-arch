                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Zachry Jacklin Section 2 NetId: jacklinz
                            | #
                            | # In my code I modified it in the following steps:
                            | # 1. I added iaddq to shorten steps
                            | # 2. I added more loops
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 
0x000: c0f2faffffffffffffff | 	iaddq $-6,%rdx		# len -= 6
0x00a: 723a01000000000000   | 	jl Extra		# see if there are extras
                            | 
0x013: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x01d: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# r11 assigned next val
0x027: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# storing src[i] to dst
0x031: 62aa                 | 	andq %r10, %r10		# src <= 0?
0x033: 715000000000000000   | 	jle Npos0		# if so, goto Npos0:
0x03c: 30fa0100000000000000 | 	irmovq $1, %r10
0x046: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x050:                      | Npos0:	
0x050: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# src->next to dst
0x05a: 62bb                 | 	andq %r11, %r11		# %r11 <= 0?
0x05c: 716f00000000000000   | 	jle Npos1		# jump to Npos1 if less than
0x065: c0f00100000000000000 | 	iaddq $1,%rax		# count++
                            | 
0x06f:                      | Npos1:
0x06f: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# src->next->next to %r10
0x079: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# src[i+3] to %r11
0x083: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# src[i+2] to dst[i+2]
0x08d: 62aa                 | 	andq %r10,%r10		# %r10 <= 0?
0x08f: 71a200000000000000   | 	jle Npos2		# jump to Npos2 if less than
0x098: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0a2:                      | Npos2:
0x0a2: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# src[i+3] to dst[i+3]
0x0ac: 62bb                 | 	andq %r11,%r11		# %r11 <= 0?
0x0ae: 71c100000000000000   | 	jle Npos3		# jump to Npos3 if less than
0x0b7: c0f00100000000000000 | 	iaddq $1,%rax		# count++
                            | 
0x0c1:                      | Npos3:
0x0c1: 50a72000000000000000 | 	mrmovq 32(%rdi),%r10	# src[i+4] to r10
0x0cb: 50b72800000000000000 | 	mrmovq 40(%rdi),%r11	# src[i+5] to r11
0x0d5: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# src[i+4] to dst[i+4]
0x0df: 62aa                 | 	andq %r10,%r10		# %r10 <= 0?
0x0e1: 71f400000000000000   | 	jle Npos4		# jump to Npos4 if less than
0x0ea: c0f00100000000000000 | 	iaddq $1,%rax		# count++
                            | 
0x0f4:                      | Npos4:
0x0f4: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# src[i+5] to dst[i+5]
0x0fe: 62bb                 | 	andq %r11,%r11		# %r11 <= 0?
0x100: 711301000000000000   | 	jle ExtraLoop		# jump to ExtraLoop if less than
0x109: c0f00100000000000000 | 	iaddq $1,%rax		# count++
                            | 
0x113:                      | ExtraLoop:
0x113: c0f73000000000000000 | 	iaddq $48, %rdi		# unroll src starting at index 6
0x11d: c0f63000000000000000 | 	iaddq $48, %rsi		# unroll dst starting at index 6
0x127: c0f2faffffffffffffff | 	iaddq $-6, %rdx		# take off 6 from len
0x131: 751300000000000000   | 	jge Loop		# if not taken care of go back to start to take care of extras
                            | 
0x13a:                      | Extra:
0x13a: c0f20600000000000000 | 	iaddq $6, %rdx		#return len value to 6
                            | 
0x144:                      | Extra0:
0x144: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x14e: 727002000000000000   | 	jl Done			# no more extras?
0x157: 50a70000000000000000 | 	mrmovq (%rdi),%r10	# src[i] to r10
0x161: 50b70800000000000000 | 	mrmovq 8(%rdi),%r11	# src[i+1] to r11
0x16b: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# src[i] to dst[i]
0x175: 62aa                 | 	andq %r10,%r10		# r10 <= 0?
0x177: 718a01000000000000   | 	jle Extra1		# jump to next extra if less than
0x180: c0f00100000000000000 | 	iaddq $1,%rax		# count++
                            | 
0x18a:                      | Extra1:
0x18a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x194: 727002000000000000   | 	jl Done			# no more extras?
0x19d: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# src[i+1] to dst[i+1]
0x1a7: 62bb                 | 	andq %r11,%r11		# r11 <= 0?
0x1a9: 71bc01000000000000   | 	jle Extra2		# jump to next extra if less than
0x1b2: c0f00100000000000000 | 	iaddq $1,%rax		# count++
                            | 
0x1bc:                      | Extra2:
0x1bc: c0f2ffffffffffffffff | 	iaddq $-1,%rdx		# len--
0x1c6: 727002000000000000   | 	jl Done			# no more extras?
0x1cf: 50a71000000000000000 | 	mrmovq 16(%rdi),%r10	# src[i+2] to r10
0x1d9: 50b71800000000000000 | 	mrmovq 24(%rdi),%r11	# src[i+3] t0 r11
0x1e3: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# src[i+2] to dst[i+2]
0x1ed: 62aa                 | 	andq %r10,%r10		# r10 <= 0?
0x1ef: 710202000000000000   | 	jle Extra3		# jump to next extra if less than
0x1f8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x202:                      | Extra3:
0x202: c0f2ffffffffffffffff | 	iaddq $-1,%rdx		# len--
0x20c: 727002000000000000   | 	jl Done			# no more extras?
0x215: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# src[i+3] to dst[i+3]
0x21f: 62bb                 | 	andq %r11,%r11		# r11 <= 0?
0x221: 713402000000000000   | 	jle Extra4		# jump to next extra if less than
0x22a: c0f00100000000000000 | 	iaddq $1,%rax		# count++
                            | 
0x234:                      | Extra4:
0x234: c0f2ffffffffffffffff | 	iaddq $-1,%rdx		# len--
0x23e: 727002000000000000   | 	jl Done			# no more extras?
0x247: 50a72000000000000000 | 	mrmovq 32(%rdi),%r10	# src[i+4] to r10
0x251: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# src[i+4] to dst[i+4]
0x25b: 62aa                 | 	andq %r10,%r10		# r10 <= 0?
0x25d: 717002000000000000   | 	jle Done		# jump to done if less than
0x266: c0f00100000000000000 | 	iaddq $1,%rax		# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x270:                      | Done:
0x270: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x271:                      | End:
                            | #/* $end ncopy-ys */
