#######################################################################
# Test for copying block of size 12;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $12, %rdx		# src and dst have 12 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Zachry Jacklin Section 2 NetId: jacklinz
#
# In my code I modified it in the following steps:
# 1. I added iaddq to shorten steps
# 2. I added more loops
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header

	iaddq $-6,%rdx		# len -= 6
	jl Extra		# see if there are extras

Loop:	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# r11 assigned next val
	rmmovq %r10, (%rsi)	# storing src[i] to dst
	andq %r10, %r10		# src <= 0?
	jle Npos0		# if so, goto Npos0:
	irmovq $1, %r10
	iaddq $1, %rax		# count++

Npos0:	
	rmmovq %r11, 8(%rsi)	# src->next to dst
	andq %r11, %r11		# %r11 <= 0?
	jle Npos1		# jump to Npos1 if less than
	iaddq $1, %rax		# count++

Npos1:
	mrmovq 16(%rdi), %r12	# src->next->next to %r10
	mrmovq 24(%rdi), %r13	# src[i+3] to %r11
	rmmovq %r12, 16(%rsi)	# src[i+2] to dst[i+2]
	andq %r12, %r12		# %r12 <= 0?
	jle Npos2		# jump to Npos2 if less than
	iaddq $1, %rax		# count++

Npos2:
	rmmovq %r13, 24(%rsi)	# src[i+3] to dst[i+3]
	andq %r13, %r13		# %r13 <= 0?
	jle Npos3		# jump to Npos3 if less than
	iaddq $1, %rax		# count++

Npos3:
	mrmovq 32(%rdi), %r14	# src[i+4] to r10
	mrmovq 40(%rdi), %rbx	# src[i+5] to r11
	rmmovq %r14, 32(%rsi)	# src[i+4] to dst[i+4]
	andq %r14, %r14		# %r14 <= 0?
	jle Npos4		# jump to Npos4 if less than
	iaddq $1, %rax		# count++

Npos4:
	rmmovq %rbx, 40(%rsi)	# src[i+5] to dst[i+5]
	andq %rbx, %rbx		# %rbx <= 0?
	jle ExtraLoop		# jump to ExtraLoop if less than
	iaddq $1, %rax		# count++

ExtraLoop:
	iaddq $48, %rdi		# unroll src starting at index 6
	iaddq $48, %rsi		# unroll dst starting at index 6
	iaddq $-6, %rdx		# take off 6 from len
	jge Loop		# if not taken care of go back to start to take care of extras

Extra:
	iaddq $6, %rdx		#return len value to 6

Extra0:
	iaddq $-1, %rdx		# len--
	jl Done			# no more extras?
	#mrmovq (%rdi), %r10	# src[i] to r10
	#mrmovq 8(%rdi), %r11	# src[i+1] to r11
	rmmovq %r10, (%rsi)	# src[i] to dst[i]
	andq %r10, %r10		# r10 <= 0?
	jle Extra1		# jump to next extra if less than
	iaddq $1, %rax		# count++

Extra1:
	iaddq $-1, %rdx		# len--
	jl Done			# no more extras?
	rmmovq %r11, 8(%rsi)	# src[i+1] to dst[i+1]
	andq %r11, %r11		# r11 <= 0?
	jle Extra2		# jump to next extra if less than
	iaddq $1, %rax		# count++

Extra2:
	iaddq $-1, %rdx		# len--
	jl Done			# no more extras?
	#mrmovq 16(%rdi), %r10	# src[i+2] to r10
	#mrmovq 24(%rdi), %r11	# src[i+3] t0 r11
	rmmovq %r12, (%rsi)	# src[i+2] to dst[i+2]
	andq %r12, %r12		# r12 <= 0?
	jle Extra3		# jump to next extra if less than
	iaddq $1, %rax		# count++

Extra3:
	iaddq $-1, %rdx		# len--
	jl Done			# no more extras?
	rmmovq %r13, 24(%rsi)	# src[i+3] to dst[i+3]
	andq %r13, %r13		# r13 <= 0?
	jle Extra4		# jump to next extra if less than
	iaddq $1, %rax		# count++

Extra4:
	iaddq $-1, %rdx		# len--
	jl Done			# no more extras?
	#mrmovq 32(%rdi), %r10	# src[i+4] to r10
	rmmovq %r14, 32(%rsi)	# src[i+4] to dst[i+4]
	andq %r14, %r14		# r14 <= 0?
	jle Done		# jump to done if less than
	iaddq $1, %rax		# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 7.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $7,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $12,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad 4
	.quad -5
	.quad -6
	.quad 7
	.quad 8
	.quad 9
	.quad -10
	.quad 11
	.quad -12
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
