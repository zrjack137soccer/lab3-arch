                            | #######################################################################
                            | # Test for copying block of size 12;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20c00000000000000 | 	irmovq $12, %rdx		# src and dst have 12 elements
0x014: 30f65804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 807a02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Zachry Jacklin Section 2 NetId: jacklinz
                            | #
                            | # In my code I modified it in the following steps:
                            | # 1. I added iaddq to shorten steps
                            | # 2. I added more loops
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 
0x03b: c0f2faffffffffffffff | 	iaddq $-6,%rdx		# len -= 6
0x045: 727501000000000000   | 	jl Extra		# see if there are extras
                            | 
0x04e: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x058: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# r11 assigned next val
0x062: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# storing src[i] to dst
0x06c: 62aa                 | 	andq %r10, %r10		# src <= 0?
0x06e: 718b00000000000000   | 	jle Npos0		# if so, goto Npos0:
0x077: 30fa0100000000000000 | 	irmovq $1, %r10
0x081: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x08b:                      | Npos0:	
0x08b: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# src->next to dst
0x095: 62bb                 | 	andq %r11, %r11		# %r11 <= 0?
0x097: 71aa00000000000000   | 	jle Npos1		# jump to Npos1 if less than
0x0a0: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0aa:                      | Npos1:
0x0aa: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# src->next->next to %r10
0x0b4: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# src[i+3] to %r11
0x0be: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# src[i+2] to dst[i+2]
0x0c8: 62cc                 | 	andq %r12, %r12		# %r12 <= 0?
0x0ca: 71dd00000000000000   | 	jle Npos2		# jump to Npos2 if less than
0x0d3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0dd:                      | Npos2:
0x0dd: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# src[i+3] to dst[i+3]
0x0e7: 62dd                 | 	andq %r13, %r13		# %r13 <= 0?
0x0e9: 71fc00000000000000   | 	jle Npos3		# jump to Npos3 if less than
0x0f2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0fc:                      | Npos3:
0x0fc: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14	# src[i+4] to r10
0x106: 50372800000000000000 | 	mrmovq 40(%rdi), %rbx	# src[i+5] to r11
0x110: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)	# src[i+4] to dst[i+4]
0x11a: 62ee                 | 	andq %r14, %r14		# %r14 <= 0?
0x11c: 712f01000000000000   | 	jle Npos4		# jump to Npos4 if less than
0x125: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x12f:                      | Npos4:
0x12f: 40362800000000000000 | 	rmmovq %rbx, 40(%rsi)	# src[i+5] to dst[i+5]
0x139: 6233                 | 	andq %rbx, %rbx		# %rbx <= 0?
0x13b: 714e01000000000000   | 	jle ExtraLoop		# jump to ExtraLoop if less than
0x144: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x14e:                      | ExtraLoop:
0x14e: c0f73000000000000000 | 	iaddq $48, %rdi		# unroll src starting at index 6
0x158: c0f63000000000000000 | 	iaddq $48, %rsi		# unroll dst starting at index 6
0x162: c0f2faffffffffffffff | 	iaddq $-6, %rdx		# take off 6 from len
0x16c: 754e00000000000000   | 	jge Loop		# if not taken care of go back to start to take care of extras
                            | 
0x175:                      | Extra:
0x175: c0f20600000000000000 | 	iaddq $6, %rdx		#return len value to 6
                            | 
0x17f:                      | Extra0:
0x17f: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x189: 727902000000000000   | 	jl Done			# no more extras?
                            | 	#mrmovq (%rdi), %r10	# src[i] to r10
                            | 	#mrmovq 8(%rdi), %r11	# src[i+1] to r11
0x192: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# src[i] to dst[i]
0x19c: 62aa                 | 	andq %r10, %r10		# r10 <= 0?
0x19e: 71b101000000000000   | 	jle Extra1		# jump to next extra if less than
0x1a7: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x1b1:                      | Extra1:
0x1b1: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x1bb: 727902000000000000   | 	jl Done			# no more extras?
0x1c4: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# src[i+1] to dst[i+1]
0x1ce: 62bb                 | 	andq %r11, %r11		# r11 <= 0?
0x1d0: 71e301000000000000   | 	jle Extra2		# jump to next extra if less than
0x1d9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x1e3:                      | Extra2:
0x1e3: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x1ed: 727902000000000000   | 	jl Done			# no more extras?
                            | 	#mrmovq 16(%rdi), %r10	# src[i+2] to r10
                            | 	#mrmovq 24(%rdi), %r11	# src[i+3] t0 r11
0x1f6: 40c60000000000000000 | 	rmmovq %r12, (%rsi)	# src[i+2] to dst[i+2]
0x200: 62cc                 | 	andq %r12, %r12		# r12 <= 0?
0x202: 711502000000000000   | 	jle Extra3		# jump to next extra if less than
0x20b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x215:                      | Extra3:
0x215: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x21f: 727902000000000000   | 	jl Done			# no more extras?
0x228: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# src[i+3] to dst[i+3]
0x232: 62dd                 | 	andq %r13, %r13		# r13 <= 0?
0x234: 714702000000000000   | 	jle Extra4		# jump to next extra if less than
0x23d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x247:                      | Extra4:
0x247: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x251: 727902000000000000   | 	jl Done			# no more extras?
                            | 	#mrmovq 32(%rdi), %r10	# src[i+4] to r10
0x25a: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)	# src[i+4] to dst[i+4]
0x264: 62ee                 | 	andq %r14, %r14		# r14 <= 0?
0x266: 717902000000000000   | 	jle Done		# jump to done if less than
0x26f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x279:                      | Done:
0x279: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x27a:                      | End:
                            | #/* $end ncopy-ys */
0x27a:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 7.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x27a:                      | check:
                            | 	# Return value test
0x27a: 30fa0700000000000000 | 	irmovq $7,%r10
0x284: 61a0                 | 	subq %r10,%rax
0x286: 73a202000000000000   | 	je checkb
0x28f: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x299: 70e003000000000000   | 	jmp cdone
0x2a2:                      | checkb:
                            | 	# Code length check
0x2a2: 30f07a02000000000000 | 	irmovq EndFun,%rax
0x2ac: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x2b6: 6120                 | 	subq %rdx,%rax
0x2b8: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x2c2: 6102                 | 	subq %rax,%rdx
0x2c4: 75e002000000000000   | 	jge checkm
0x2cd: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x2d7: 70e003000000000000   | 	jmp cdone
0x2e0:                      | checkm:
0x2e0: 30f25804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x2ea: 30f3e803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x2f4: 30f70c00000000000000 | 	irmovq $12,%rdi  # Count
0x2fe: 6277                 | 	andq %rdi,%rdi
0x300: 735e03000000000000   | 	je checkpre         # Skip check if count = 0
0x309:                      | mcloop:
0x309: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x313: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x31d: 6160                 | 	subq %rsi,%rax
0x31f: 733b03000000000000   | 	je  mok
0x328: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x332: 70e003000000000000   | 	jmp cdone
0x33b:                      | mok:
0x33b: 30f00800000000000000 | 	irmovq $8,%rax
0x345: 6002                 | 	addq %rax,%rdx	  # dest ++
0x347: 6003                 | 	addq %rax,%rbx    # src++
0x349: 30f00100000000000000 | 	irmovq $1,%rax
0x353: 6107                 | 	subq %rax,%rdi    # cnt--
0x355: 760903000000000000   | 	jg mcloop
0x35e:                      | checkpre:
                            | 	# Check for corruption
0x35e: 30f25004000000000000 | 	irmovq Predest,%rdx
0x368: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x372: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x37c: 6120                 | 	subq %rdx,%rax
0x37e: 739a03000000000000   | 	je checkpost
0x387: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x391: 70e003000000000000   | 	jmp cdone
0x39a:                      | checkpost:
                            | 	# Check for corruption
0x39a: 30f2b804000000000000 | 	irmovq Postdest,%rdx
0x3a4: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x3ae: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x3b8: 6120                 | 	subq %rdx,%rax
0x3ba: 73d603000000000000   | 	je checkok
0x3c3: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x3cd: 70e003000000000000   | 	jmp cdone
0x3d6:                      | checkok:
                            | 	# Successful checks
0x3d6: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x3e0:                      | cdone:
0x3e0: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3e8:                      | 	.align 8
0x3e8:                      | src:
0x3e8: 0100000000000000     | 	.quad 1
0x3f0: feffffffffffffff     | 	.quad -2
0x3f8: 0300000000000000     | 	.quad 3
0x400: 0400000000000000     | 	.quad 4
0x408: fbffffffffffffff     | 	.quad -5
0x410: faffffffffffffff     | 	.quad -6
0x418: 0700000000000000     | 	.quad 7
0x420: 0800000000000000     | 	.quad 8
0x428: 0900000000000000     | 	.quad 9
0x430: f6ffffffffffffff     | 	.quad -10
0x438: 0b00000000000000     | 	.quad 11
0x440: f4ffffffffffffff     | 	.quad -12
0x448: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x450:                      | 	.align 16
0x450:                      | Predest:
0x450: fadebc0000000000     | 	.quad 0xbcdefa
0x458:                      | dest:
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8:                      | Postdest:
0x4b8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x4c0:                      | .align 8
                            | # Run time stack
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
0x510: 0000000000000000     | 	.quad 0
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
                            | 
0x540:                      | Stack:
